{"version":3,"file":"topopass.cjs.production.min.js","sources":["../src/contanst.ts","../src/modules/wallet/auth.ts","../src/modules/wallet/address.ts","../src/modules/wallet/wallet.ts","../src/modules/wallet/network.ts"],"sourcesContent":["export const LOCAL_STORAGE = {\r\n  TOPOPASS_ACCOUNT_HASH: 'topopass_account_hash',\r\n  CONTACTS: 'contacts',\r\n}\r\n\r\nexport type RESPONSE_AUTH_WALLET = {\r\n  phrase: string;\r\n  path: string;\r\n  locale: string;\r\n}\r\n\r\nexport type RESPONSE_GLOBAL = {\r\n  message: string;\r\n  data: any;\r\n}\r\n\r\nexport type RESPONSE_ACTION_AUTH = {\r\n  message: string;\r\n  data: any;\r\n}\r\n\r\nexport type CONTACT = {\r\n  address: string;\r\n  name: string;\r\n  avatar: string;\r\n  space: string;\r\n}\r\n\r\nexport type RESPONSE_CONTACT = {\r\n  message: string;\r\n  data: any;\r\n}\r\n\r\n","import {\r\n  LOCAL_STORAGE,\r\n  RESPONSE_AUTH_WALLET,\r\n  RESPONSE_ACTION_AUTH,\r\n  RESPONSE_GLOBAL\r\n} from '../../contanst'\r\nimport CryptoJS from 'crypto-js'\r\nimport { Wallet } from 'ethers'\r\n\r\nexport class AUTH_TOPO {\r\n  \r\n  hash: string;\r\n  password: string;\r\n\r\n  constructor (hash: string) {\r\n    this.hash = hash\r\n    this.password = ''\r\n  }\r\n\r\n  CHECK_AUTH (account: string, password: string): Promise<RESPONSE_AUTH_WALLET> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let ciphertext = account\r\n        let decryptData = CryptoJS.AES.decrypt(\r\n          ciphertext,\r\n          password\r\n        ).toString(CryptoJS.enc.Utf8);\r\n\r\n        if (decryptData) {\r\n          const result = typeof decryptData === 'string' ? JSON.parse(decryptData) : decryptData\r\n          this.password = password\r\n          resolve(result)\r\n        } else reject({\r\n          phrase: null,\r\n          path: \"\",\r\n          locale: \"en\"\r\n        })\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  SET_AUTH (mnemonic: string, password: string): Promise<RESPONSE_ACTION_AUTH> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        var ciphertext = CryptoJS.AES.encrypt(mnemonic, password).toString();\r\n        localStorage.setItem(LOCAL_STORAGE.TOPOPASS_ACCOUNT_HASH, ciphertext)\r\n        this.hash = ciphertext\r\n        resolve({\r\n          message: 'Create auth success!',\r\n          data: ciphertext,\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: 'Failed create auth!',\r\n          data: error,\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  SIGNUP (seedPhrase: string, password: string): Promise<RESPONSE_GLOBAL> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const wallet = await Wallet.fromMnemonic(seedPhrase)\r\n        var ciphertext = CryptoJS.AES.encrypt(JSON.stringify(wallet.mnemonic), password).toString();\r\n        localStorage.setItem(LOCAL_STORAGE.TOPOPASS_ACCOUNT_HASH, ciphertext)\r\n        resolve({\r\n          message: 'SignUp success',\r\n          data: ciphertext\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: 'SignUp failed',\r\n          data: null\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { utils } from 'ethers'\r\nimport { CONTACT, LOCAL_STORAGE, RESPONSE_CONTACT } from '../../contanst'\r\n\r\nexport class ADDRESS_WALLET {\r\n  address: string;\r\n\r\n  constructor (address: string) {\r\n    this.address = address\r\n  }\r\n\r\n  CHECK_ADDRESS (address: string): boolean {\r\n    return utils.isAddress(address)\r\n  }\r\n\r\n  SET_CONTACT (address: string, name: string): Promise<RESPONSE_CONTACT> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.CHECK_ADDRESS(address)) {\r\n        let contacts : CONTACT[] | undefined;\r\n        if (localStorage.getItem(LOCAL_STORAGE.CONTACTS)) contacts = JSON.parse(localStorage.getItem('contacts') || '[]')\r\n\r\n        if (contacts !== undefined) contacts.push({address, name, space: '', avatar: ''})\r\n        else contacts = [{address, name, space: '', avatar: ''}]\r\n\r\n        resolve({\r\n          message: 'Save contact success',\r\n          data: {address, name, space: '', avatar: ''}\r\n        })\r\n      } else {\r\n        reject({\r\n          message: 'Address not is validate!!',\r\n          data: ''\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  GET_LIST_CONTACT (): Promise<RESPONSE_CONTACT> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let contacts: CONTACT[] | undefined;\r\n      \r\n        if(localStorage.getItem(LOCAL_STORAGE.CONTACTS)) contacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE.CONTACTS) || '[]')\r\n\r\n        resolve({\r\n          message: 'Get list contact',\r\n          data: contacts\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: 'GET failed list contact',\r\n          data: error\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { NETWORK_TOPO } from \"./network\";\r\nimport { randomBytes } from \"@ethersproject/random\";\r\nimport { entropyToMnemonic } from \"@ethersproject/hdnode\";\r\nimport { AUTH_TOPO } from \"./auth\"; \r\nimport { ADDRESS_WALLET } from \"./address\";\r\nimport {\r\n  utils,\r\n  Wallet\r\n} from 'ethers'\r\nimport {\r\n  RESPONSE_ACTION_AUTH,\r\n  RESPONSE_GLOBAL\r\n} from '../../contanst'\r\n\r\nexport class WALLET_TOPO {\r\n  network: NETWORK_TOPO;\r\n  auth: AUTH_TOPO\r\n  address: ADDRESS_WALLET;\r\n  wallet: any;\r\n  walletMnemonic: any;\r\n  password: string;\r\n\r\n  constructor (network: NETWORK_TOPO) {\r\n    this.network = network\r\n    this.auth = new AUTH_TOPO('')\r\n    this.address = new ADDRESS_WALLET('')\r\n    this.wallet = null\r\n    this.password = ''\r\n  }\r\n\r\n  LOGIN_TOPO (account: string, password: string): Promise<boolean> {\r\n    return new Promise(async (resolve, reject) => {\r\n      await this.auth.CHECK_AUTH(account, password)\r\n      .then(async (res) => {\r\n        this.walletMnemonic = await Wallet.fromMnemonic(res.phrase, res.path)\r\n        this.wallet = this.walletMnemonic.connect(this.network.rpc)\r\n        this.password = password\r\n        resolve(true)\r\n      })\r\n      .catch(() => {\r\n        reject(false)\r\n      })\r\n    })\r\n  }\r\n\r\n  CREATE_SEED_PHRASE (options: any) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        if (!options) { options = { }; }\r\n        const entropy = randomBytes(16)\r\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\r\n\r\n        if (mnemonic) resolve(mnemonic)\r\n        else reject(mnemonic)\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  IMPORT_SEED_PHRASE (seedPhrase: string, options: any, password: string): Promise<RESPONSE_ACTION_AUTH> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!options) { options = { }; }\r\n      const wallet = await Wallet.fromMnemonic(seedPhrase, options.path, options.locale)\r\n      this.auth.SET_AUTH(JSON.stringify(wallet.mnemonic), password)\r\n        .then((res) => {\r\n          this.wallet = wallet;\r\n          resolve(res)\r\n        })\r\n        .catch((err) => {\r\n          reject(err)\r\n        })\r\n    })\r\n  }\r\n\r\n  async GET_BALANCE_TOPO() {\r\n    const balance = await this.wallet.getBalance();\r\n    console.log('GET_BALANCE_TOPO', balance)\r\n    return balance\r\n  }\r\n\r\n\r\n  SEND_TRANSACTION (to: string, amount: string, gasLimit: number): Promise<RESPONSE_GLOBAL> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const tx = {\r\n          from: this.walletMnemonic.address,\r\n          to,\r\n          value: utils.parseEther(amount),\r\n          gasLimit: utils.hexlify(gasLimit)\r\n        }\r\n        if(this.wallet) {\r\n          const data = await this.wallet.sendTransaction(tx)\r\n          resolve({\r\n            message: 'sendTransaction',\r\n            data: data\r\n          })\r\n        }\r\n        else {\r\n          reject({\r\n            message: `address ${to} is not validate!`,\r\n            data: ''\r\n          })\r\n        } \r\n      } catch (error) {\r\n        \r\n      }\r\n      \r\n    })\r\n  }\r\n\r\n  // GET_TRANSACTIONS (): Promise<RESPONSE_GLOBAL> {\r\n  //   // return new Promise((resolve, reject) => {\r\n      \r\n  //   // })\r\n  // }\r\n\r\n  GET_LIST_CONTRACT (): Promise<RESPONSE_GLOBAL> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        resolve({\r\n          message: '',\r\n          data: []\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: '',\r\n          data: error\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { JsonRpcProvider } from \"@ethersproject/providers\"\r\nimport { ethers } from 'ethers'\r\n\r\nexport class NETWORK_TOPO {\r\n  network: string;\r\n  name: string;\r\n  rpc: JsonRpcProvider;\r\n  provider: any;\r\n\r\n\r\n  constructor (network: string, name: string) {\r\n    this.network = network;\r\n    this.name = name;\r\n    this.rpc = new JsonRpcProvider(network)\r\n    this.provider = new ethers.providers.JsonRpcProvider(network)\r\n  }\r\n}\r\n"],"names":["AUTH_TOPO","hash","this","password","_proto","CHECK_AUTH","account","Promise","resolve","reject","decryptData","CryptoJS","AES","decrypt","toString","enc","Utf8","result","JSON","parse","_this","phrase","path","locale","error","SET_AUTH","mnemonic","ciphertext","encrypt","localStorage","setItem","_this2","message","data","SIGNUP","seedPhrase","_context","Wallet","fromMnemonic","stringify","ADDRESS_WALLET","address","CHECK_ADDRESS","utils","isAddress","SET_CONTACT","name","contacts","getItem","undefined","push","space","avatar","GET_LIST_CONTACT","WALLET_TOPO","network","auth","wallet","LOGIN_TOPO","_context2","then","res","walletMnemonic","connect","rpc","CREATE_SEED_PHRASE","options","entropy","randomBytes","entropyToMnemonic","IMPORT_SEED_PHRASE","_context4","err","GET_BALANCE_TOPO","_context5","getBalance","balance","console","log","SEND_TRANSACTION","to","amount","gasLimit","_context6","tx","from","_this3","value","parseEther","hexlify","sendTransaction","GET_LIST_CONTRACT","JsonRpcProvider","provider","ethers","providers"],"mappings":"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"}