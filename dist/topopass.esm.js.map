{"version":3,"file":"topopass.esm.js","sources":["../src/modules/wallet/network.ts","../src/contanst.ts","../src/modules/wallet/auth.ts","../src/modules/wallet/address.ts","../src/modules/wallet/wallet.ts"],"sourcesContent":["import { JsonRpcProvider } from \"@ethersproject/providers\"\r\nimport { ethers } from 'ethers'\r\n\r\nexport class NETWORK_TOPO {\r\n  network: string;\r\n  name: string;\r\n  rpc: JsonRpcProvider;\r\n  provider: any;\r\n\r\n\r\n  constructor (network: string, name: string) {\r\n    this.network = network;\r\n    this.name = name;\r\n    this.rpc = new JsonRpcProvider(network)\r\n    this.provider = new ethers.providers.JsonRpcProvider(network)\r\n  }\r\n}\r\n","export const LOCAL_STORAGE = {\r\n  TOPOPASS_ACCOUNT_HASH: 'topopass_account_hash',\r\n  CONTACTS: 'contacts',\r\n}\r\n\r\nexport type RESPONSE_AUTH_WALLET = {\r\n  phrase: string;\r\n  path: string;\r\n  locale: string;\r\n}\r\n\r\nexport type RESPONSE_GLOBAL = {\r\n  message: string;\r\n  data: any;\r\n}\r\n\r\nexport type RESPONSE_ACTION_AUTH = {\r\n  message: string;\r\n  data: any;\r\n}\r\n\r\nexport type CONTACT = {\r\n  address: string;\r\n  name: string;\r\n  avatar: string;\r\n  space: string;\r\n}\r\n\r\nexport type RESPONSE_CONTACT = {\r\n  message: string;\r\n  data: any;\r\n}\r\n\r\n","import {\r\n  LOCAL_STORAGE,\r\n  RESPONSE_AUTH_WALLET,\r\n  RESPONSE_ACTION_AUTH,\r\n  RESPONSE_GLOBAL\r\n} from '../../contanst'\r\nimport CryptoJS from 'crypto-js'\r\nimport { Wallet } from 'ethers'\r\n\r\nexport class AUTH_TOPO {\r\n  \r\n  hash: string;\r\n  password: string;\r\n\r\n  constructor (hash: string) {\r\n    this.hash = hash\r\n    this.password = ''\r\n  }\r\n\r\n  CHECK_AUTH (account: string, password: string): Promise<RESPONSE_AUTH_WALLET> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let ciphertext = account\r\n        let decryptData = CryptoJS.AES.decrypt(\r\n          ciphertext,\r\n          password\r\n        ).toString(CryptoJS.enc.Utf8);\r\n\r\n        if (decryptData) {\r\n          const result = typeof decryptData === 'string' ? JSON.parse(decryptData) : decryptData\r\n          this.password = password\r\n          resolve(result)\r\n        } else reject({\r\n          phrase: null,\r\n          path: \"\",\r\n          locale: \"en\"\r\n        })\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  SET_AUTH (mnemonic: string, password: string): Promise<RESPONSE_ACTION_AUTH> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        var ciphertext = CryptoJS.AES.encrypt(mnemonic, password).toString();\r\n        localStorage.setItem(LOCAL_STORAGE.TOPOPASS_ACCOUNT_HASH, ciphertext)\r\n        this.hash = ciphertext\r\n        resolve({\r\n          message: 'Create auth success!',\r\n          data: ciphertext,\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: 'Failed create auth!',\r\n          data: error,\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  SIGNUP (seedPhrase: string, password: string): Promise<RESPONSE_GLOBAL> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const wallet = await Wallet.fromMnemonic(seedPhrase)\r\n        var ciphertext = CryptoJS.AES.encrypt(JSON.stringify(wallet.mnemonic), password).toString();\r\n        localStorage.setItem(LOCAL_STORAGE.TOPOPASS_ACCOUNT_HASH, ciphertext)\r\n        resolve({\r\n          message: 'SignUp success',\r\n          data: ciphertext\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: 'SignUp failed',\r\n          data: null\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { utils } from 'ethers'\r\nimport { CONTACT, LOCAL_STORAGE, RESPONSE_CONTACT } from '../../contanst'\r\n\r\nexport class ADDRESS_WALLET {\r\n  address: string;\r\n\r\n  constructor (address: string) {\r\n    this.address = address\r\n  }\r\n\r\n  CHECK_ADDRESS (address: string): boolean {\r\n    return utils.isAddress(address)\r\n  }\r\n\r\n  SET_CONTACT (address: string, name: string): Promise<RESPONSE_CONTACT> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.CHECK_ADDRESS(address)) {\r\n        let contacts : CONTACT[] | undefined;\r\n        if (localStorage.getItem(LOCAL_STORAGE.CONTACTS)) contacts = JSON.parse(localStorage.getItem('contacts') || '[]')\r\n\r\n        if (contacts !== undefined) contacts.push({address, name, space: '', avatar: ''})\r\n        else contacts = [{address, name, space: '', avatar: ''}]\r\n\r\n        resolve({\r\n          message: 'Save contact success',\r\n          data: {address, name, space: '', avatar: ''}\r\n        })\r\n      } else {\r\n        reject({\r\n          message: 'Address not is validate!!',\r\n          data: ''\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  GET_LIST_CONTACT (): Promise<RESPONSE_CONTACT> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let contacts: CONTACT[] | undefined;\r\n      \r\n        if(localStorage.getItem(LOCAL_STORAGE.CONTACTS)) contacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE.CONTACTS) || '[]')\r\n\r\n        resolve({\r\n          message: 'Get list contact',\r\n          data: contacts\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: 'GET failed list contact',\r\n          data: error\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { NETWORK_TOPO } from \"./network\";\r\nimport { randomBytes } from \"@ethersproject/random\";\r\nimport { entropyToMnemonic } from \"@ethersproject/hdnode\";\r\nimport { AUTH_TOPO } from \"./auth\"; \r\nimport { ADDRESS_WALLET } from \"./address\";\r\nimport {\r\n  utils,\r\n  Wallet,\r\n  Contract\r\n} from 'ethers'\r\nimport {\r\n  RESPONSE_ACTION_AUTH,\r\n  RESPONSE_GLOBAL\r\n} from '../../contanst'\r\n\r\nexport class WALLET_TOPO {\r\n  network: NETWORK_TOPO;\r\n  auth: AUTH_TOPO\r\n  address: ADDRESS_WALLET;\r\n  wallet: any;\r\n  walletMnemonic: any;\r\n  password: string;\r\n\r\n  constructor (network: NETWORK_TOPO) {\r\n    this.network = network\r\n    this.auth = new AUTH_TOPO('')\r\n    this.address = new ADDRESS_WALLET('')\r\n    this.wallet = null\r\n    this.password = ''\r\n  }\r\n\r\n  LOGIN_TOPO (account: string, password: string): Promise<boolean> {\r\n    return new Promise(async (resolve, reject) => {\r\n      await this.auth.CHECK_AUTH(account, password)\r\n      .then(async (res) => {\r\n        this.walletMnemonic = await Wallet.fromMnemonic(res.phrase, res.path)\r\n        this.wallet = this.walletMnemonic.connect(this.network.rpc)\r\n        this.password = password\r\n        resolve(true)\r\n      })\r\n      .catch(() => {\r\n        reject(false)\r\n      })\r\n    })\r\n  }\r\n\r\n  CREATE_SEED_PHRASE (options: any) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        if (!options) { options = { }; }\r\n        const entropy = randomBytes(16)\r\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\r\n\r\n        if (mnemonic) resolve(mnemonic)\r\n        else reject(mnemonic)\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  IMPORT_SEED_PHRASE (seedPhrase: string, options: any, password: string): Promise<RESPONSE_ACTION_AUTH> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!options) { options = { }; }\r\n      const wallet = await Wallet.fromMnemonic(seedPhrase, options.path, options.locale)\r\n      this.auth.SET_AUTH(JSON.stringify(wallet.mnemonic), password)\r\n        .then((res) => {\r\n          this.wallet = wallet;\r\n          resolve(res)\r\n        })\r\n        .catch((err) => {\r\n          reject(err)\r\n        })\r\n    })\r\n  }\r\n\r\n  async GET_BALANCE_TOPO(address: string) {\r\n    if(!address) {\r\n      const balance = await this.wallet.getBalance();\r\n      return balance\r\n    } else {\r\n      const contract = await this.GET_CONTRACT(address)\r\n      return contract.balanceOf(address)\r\n    }\r\n  }\r\n\r\n  GET_CONTRACT (address: string) {\r\n    // The ERC-20 Contract ABI, which is a common contract interface\r\n    // for tokens (this is the Human-Readable ABI format)\r\n    const daiAbi = [\r\n      // Some details about the token\r\n      \"function name() view returns (string)\",\r\n      \"function symbol() view returns (string)\",\r\n\r\n      // Get the account balance\r\n      \"function balanceOf(address) view returns (uint)\",\r\n\r\n      // Send some of your tokens to someone else\r\n      \"function transfer(address to, uint amount)\",\r\n\r\n      // An event triggered whenever anyone transfers to someone else\r\n      \"event Transfer(address indexed from, address indexed to, uint amount)\"\r\n    ];\r\n\r\n    // The Contract object\r\n    const contract = new Contract(address, daiAbi, this.network.provider);\r\n    return contract\r\n  }\r\n\r\n  SEND_TRANSACTION (to: string, amount: string, gasLimit: number): Promise<RESPONSE_GLOBAL> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const tx = {\r\n          from: this.walletMnemonic.address,\r\n          to,\r\n          value: utils.parseEther(amount),\r\n          gasLimit: utils.hexlify(gasLimit)\r\n        }\r\n        if(this.wallet) {\r\n          const data = await this.wallet.sendTransaction(tx)\r\n          resolve({\r\n            message: 'sendTransaction',\r\n            data: data\r\n          })\r\n        }\r\n        else {\r\n          reject({\r\n            message: `address ${to} is not validate!`,\r\n            data: ''\r\n          })\r\n        } \r\n      } catch (error) {\r\n        \r\n      }\r\n      \r\n    })\r\n  }\r\n\r\n  // GET_TRANSACTIONS (): Promise<RESPONSE_GLOBAL> {\r\n  //   // return new Promise((resolve, reject) => {\r\n      \r\n  //   // })\r\n  // }\r\n\r\n  GET_LIST_CONTRACT (): Promise<RESPONSE_GLOBAL> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        resolve({\r\n          message: '',\r\n          data: []\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: '',\r\n          data: error\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n"],"names":["NETWORK_TOPO","network","name","rpc","JsonRpcProvider","provider","ethers","providers","LOCAL_STORAGE","TOPOPASS_ACCOUNT_HASH","CONTACTS","AUTH_TOPO","hash","password","CHECK_AUTH","account","Promise","resolve","reject","ciphertext","decryptData","CryptoJS","AES","decrypt","toString","enc","Utf8","result","JSON","parse","phrase","path","locale","error","SET_AUTH","mnemonic","encrypt","localStorage","setItem","message","data","SIGNUP","seedPhrase","Wallet","fromMnemonic","wallet","stringify","ADDRESS_WALLET","address","CHECK_ADDRESS","utils","isAddress","SET_CONTACT","contacts","getItem","undefined","push","space","avatar","GET_LIST_CONTACT","WALLET_TOPO","auth","LOGIN_TOPO","then","res","walletMnemonic","connect","CREATE_SEED_PHRASE","options","entropy","randomBytes","entropyToMnemonic","IMPORT_SEED_PHRASE","err","GET_BALANCE_TOPO","getBalance","balance","GET_CONTRACT","contract","balanceOf","daiAbi","Contract","SEND_TRANSACTION","to","amount","gasLimit","tx","from","value","parseEther","hexlify","sendTransaction","GET_LIST_CONTRACT"],"mappings":"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"}